import{L as Be,F as Ht,k as Ut,l as Se,e as Te,f as Yt,m as Me,S as Pe,d as _e,W as Ne,n as Ie,o as Fe,T as Re,E as Le,j as qe,p as ke,Q as Oe,g as Ve,q as We}from"./three.module-FffQEkxT.js";import{O as je}from"./OrbitControls-RfyKrsAp.js";import{G as De}from"./GLTFLoader-DauaaqUj.js";import{d as Ge,p as He,q as Ue,o as Ye,a as $e}from"./index-fTcqjtjT.js";const It=new WeakMap;class Xe extends Be{constructor(t){super(t),this.decoderPath="",this.decoderConfig={},this.decoderBinary=null,this.decoderPending=null,this.workerLimit=4,this.workerPool=[],this.workerNextTaskID=1,this.workerSourceURL="",this.defaultAttributeIDs={position:"POSITION",normal:"NORMAL",color:"COLOR",uv:"TEX_COORD"},this.defaultAttributeTypes={position:"Float32Array",normal:"Float32Array",color:"Float32Array",uv:"Float32Array"}}setDecoderPath(t){return this.decoderPath=t,this}setDecoderConfig(t){return this.decoderConfig=t,this}setWorkerLimit(t){return this.workerLimit=t,this}load(t,e,s,n){const i=new Ht(this.manager);i.setPath(this.path),i.setResponseType("arraybuffer"),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(t,o=>{this.parse(o,e,n)},s,n)}parse(t,e,s=()=>{}){this.decodeDracoFile(t,e,null,null,Ut).catch(s)}decodeDracoFile(t,e,s,n,i=Se,o=()=>{}){const r={attributeIDs:s||this.defaultAttributeIDs,attributeTypes:n||this.defaultAttributeTypes,useUniqueIDs:!!s,vertexColorSpace:i};return this.decodeGeometry(t,r).then(e).catch(o)}decodeGeometry(t,e){const s=JSON.stringify(e);if(It.has(t)){const c=It.get(t);if(c.key===s)return c.promise;if(t.byteLength===0)throw new Error("THREE.DRACOLoader: Unable to re-decode a buffer with different settings. Buffer has already been transferred.")}let n;const i=this.workerNextTaskID++,o=t.byteLength,r=this._getWorker(i,o).then(c=>(n=c,new Promise((l,d)=>{n._callbacks[i]={resolve:l,reject:d},n.postMessage({type:"decode",id:i,taskConfig:e,buffer:t},[t])}))).then(c=>this._createGeometry(c.geometry));return r.catch(()=>!0).then(()=>{n&&i&&this._releaseTask(n,i)}),It.set(t,{key:s,promise:r}),r}_createGeometry(t){const e=new Te;t.index&&e.setIndex(new Yt(t.index.array,1));for(let s=0;s<t.attributes.length;s++){const n=t.attributes[s],i=n.name,o=n.array,r=n.itemSize,c=new Yt(o,r);i==="color"&&(this._assignVertexColorSpace(c,n.vertexColorSpace),c.normalized=!(o instanceof Float32Array)),e.setAttribute(i,c)}return e}_assignVertexColorSpace(t,e){if(e!==Ut)return;const s=new Me;for(let n=0,i=t.count;n<i;n++)s.fromBufferAttribute(t,n).convertSRGBToLinear(),t.setXYZ(n,s.r,s.g,s.b)}_loadLibrary(t,e){const s=new Ht(this.manager);return s.setPath(this.decoderPath),s.setResponseType(e),s.setWithCredentials(this.withCredentials),new Promise((n,i)=>{s.load(t,n,void 0,i)})}preload(){return this._initDecoder(),this}_initDecoder(){if(this.decoderPending)return this.decoderPending;const t=typeof WebAssembly!="object"||this.decoderConfig.type==="js",e=[];return t?e.push(this._loadLibrary("draco_decoder.js","text")):(e.push(this._loadLibrary("draco_wasm_wrapper.js","text")),e.push(this._loadLibrary("draco_decoder.wasm","arraybuffer"))),this.decoderPending=Promise.all(e).then(s=>{const n=s[0];t||(this.decoderConfig.wasmBinary=s[1]);const i=Ke.toString(),o=["/* draco decoder */",n,"","/* worker */",i.substring(i.indexOf("{")+1,i.lastIndexOf("}"))].join(`
`);this.workerSourceURL=URL.createObjectURL(new Blob([o]))}),this.decoderPending}_getWorker(t,e){return this._initDecoder().then(()=>{if(this.workerPool.length<this.workerLimit){const n=new Worker(this.workerSourceURL);n._callbacks={},n._taskCosts={},n._taskLoad=0,n.postMessage({type:"init",decoderConfig:this.decoderConfig}),n.onmessage=function(i){const o=i.data;switch(o.type){case"decode":n._callbacks[o.id].resolve(o);break;case"error":n._callbacks[o.id].reject(o);break;default:console.error('THREE.DRACOLoader: Unexpected message, "'+o.type+'"')}},this.workerPool.push(n)}else this.workerPool.sort(function(n,i){return n._taskLoad>i._taskLoad?-1:1});const s=this.workerPool[this.workerPool.length-1];return s._taskCosts[t]=e,s._taskLoad+=e,s})}_releaseTask(t,e){t._taskLoad-=t._taskCosts[e],delete t._callbacks[e],delete t._taskCosts[e]}debug(){console.log("Task load: ",this.workerPool.map(t=>t._taskLoad))}dispose(){for(let t=0;t<this.workerPool.length;++t)this.workerPool[t].terminate();return this.workerPool.length=0,this.workerSourceURL!==""&&URL.revokeObjectURL(this.workerSourceURL),this}}function Ke(){let F,t;onmessage=function(o){const r=o.data;switch(r.type){case"init":F=r.decoderConfig,t=new Promise(function(d){F.onModuleLoaded=function(u){d({draco:u})},DracoDecoderModule(F)});break;case"decode":const c=r.buffer,l=r.taskConfig;t.then(d=>{const u=d.draco,h=new u.Decoder;try{const p=e(u,h,new Int8Array(c),l),f=p.attributes.map(v=>v.array.buffer);p.index&&f.push(p.index.array.buffer),self.postMessage({type:"decode",id:r.id,geometry:p},f)}catch(p){console.error(p),self.postMessage({type:"error",id:r.id,error:p.message})}finally{u.destroy(h)}});break}};function e(o,r,c,l){const d=l.attributeIDs,u=l.attributeTypes;let h,p;const f=r.GetEncodedGeometryType(c);if(f===o.TRIANGULAR_MESH)h=new o.Mesh,p=r.DecodeArrayToMesh(c,c.byteLength,h);else if(f===o.POINT_CLOUD)h=new o.PointCloud,p=r.DecodeArrayToPointCloud(c,c.byteLength,h);else throw new Error("THREE.DRACOLoader: Unexpected geometry type.");if(!p.ok()||h.ptr===0)throw new Error("THREE.DRACOLoader: Decoding failed: "+p.error_msg());const v={index:null,attributes:[]};for(const y in d){const w=self[u[y]];let m,x;if(l.useUniqueIDs)x=d[y],m=r.GetAttributeByUniqueId(h,x);else{if(x=r.GetAttributeId(h,o[d[y]]),x===-1)continue;m=r.GetAttribute(h,x)}const g=n(o,r,h,y,w,m);y==="color"&&(g.vertexColorSpace=l.vertexColorSpace),v.attributes.push(g)}return f===o.TRIANGULAR_MESH&&(v.index=s(o,r,h)),o.destroy(h),v}function s(o,r,c){const d=c.num_faces()*3,u=d*4,h=o._malloc(u);r.GetTrianglesUInt32Array(c,u,h);const p=new Uint32Array(o.HEAPF32.buffer,h,d).slice();return o._free(h),{array:p,itemSize:1}}function n(o,r,c,l,d,u){const h=u.num_components(),f=c.num_points()*h,v=f*d.BYTES_PER_ELEMENT,y=i(o,d),w=o._malloc(v);r.GetAttributeDataArrayForAllPoints(c,u,y,v,w);const m=new d(o.HEAPF32.buffer,w,f).slice();return o._free(w),{name:l,array:m,itemSize:h}}function i(o,r){switch(r){case Float32Array:return o.DT_FLOAT32;case Int8Array:return o.DT_INT8;case Int16Array:return o.DT_INT16;case Int32Array:return o.DT_INT32;case Uint8Array:return o.DT_UINT8;case Uint16Array:return o.DT_UINT16;case Uint32Array:return o.DT_UINT32}}}class K{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new a);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new a);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new K);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],c=s[2],l=s[3],d=s[4],u=s[5],h=s[6],p=s[7],f=s[8],v=n[0],y=n[1],w=n[2],m=n[3],x=n[4],g=n[5],b=n[6],z=n[7],B=n[8];return i[0]=o*v+r*m+c*b,i[1]=o*y+r*x+c*z,i[2]=o*w+r*g+c*B,i[3]=l*v+d*m+u*b,i[4]=l*y+d*x+u*z,i[5]=l*w+d*g+u*B,i[6]=h*v+p*m+f*b,i[7]=h*y+p*x+f*z,i[8]=h*w+p*g+f*B,e}scale(t,e){e===void 0&&(e=new K);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new a);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let c=3;const l=c;let d;const u=4;let h;do{if(o=l-c,i[o+n*o]===0){for(r=o+1;r<l;r++)if(i[o+n*r]!==0){d=u;do h=u-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<l;r++){const p=i[o+n*r]/i[o+n*o];d=u;do h=u-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*p;while(--d)}}while(--c);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new K);const e=3,s=6,n=Ze;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const c=r;let l;const d=s;let u;do{if(i=c-r,n[i+s*i]===0){for(o=i+1;o<c;o++)if(n[i+s*o]!==0){l=d;do u=d-l,n[u+s*i]+=n[u+s*o];while(--l);break}}if(n[i+s*i]!==0)for(o=i+1;o<c;o++){const h=n[i+s*o]/n[i+s*i];l=d;do u=d-l,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*h;while(--l)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];l=s;do u=s-l,n[u+s*o]=n[u+s*o]-n[u+s*i]*h;while(--l)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];l=s;do u=s-l,n[u+s*i]=n[u+s*i]*h;while(--l)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,c=n+n,l=e*o,d=e*r,u=e*c,h=s*r,p=s*c,f=n*c,v=i*o,y=i*r,w=i*c,m=this.elements;return m[3*0+0]=1-(h+f),m[3*0+1]=d-w,m[3*0+2]=u+y,m[3*1+0]=d+w,m[3*1+1]=1-(l+f),m[3*1+2]=p-v,m[3*2+0]=u-y,m[3*2+1]=p+v,m[3*2+2]=1-(l+h),this}transpose(t){t===void 0&&(t=new K);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const Ze=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class a{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new a);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z;return e.x=r*i-c*n,e.y=c*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new a(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new a(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new K([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new a);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new a);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new a),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new a),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new a),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Qe,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=Je;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate($t),$t.almostEquals(t,e)}clone(){return new a(this.x,this.y,this.z)}}a.ZERO=new a(0,0,0);a.UNIT_X=new a(1,0,0);a.UNIT_Y=new a(0,1,0);a.UNIT_Z=new a(0,0,1);const Qe=new a,Je=new a,$t=new a;class W{constructor(t){t===void 0&&(t={}),this.lowerBound=new a,this.upperBound=new a,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let c=1;c<t.length;c++){let l=t[c];r&&(r.vmult(l,Xt),l=Xt),l.x>o.x&&(o.x=l.x),l.x<i.x&&(i.x=l.x),l.y>o.y&&(o.y=l.y),l.y<i.y&&(i.y=l.y),l.z>o.z&&(o.z=l.z),l.z<i.z&&(i.z=l.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new W().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,c=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&c}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,c){const l=this.lowerBound,d=this.upperBound;t.copy(l),e.set(d.x,l.y,l.z),s.set(d.x,d.y,l.z),n.set(l.x,d.y,d.z),i.set(d.x,l.y,d.z),o.set(l.x,d.y,l.z),r.set(l.x,l.y,d.z),c.copy(d)}toLocalFrame(t,e){const s=Kt,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,c,l,d,u);for(let h=0;h!==8;h++){const p=s[h];t.pointToLocal(p,p)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Kt,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,c,l,d,u);for(let h=0;h!==8;h++){const p=s[h];t.pointToWorld(p,p)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,c=(this.upperBound.x-s.x)*n,l=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,p=Math.max(Math.max(Math.min(r,c),Math.min(l,d)),Math.min(u,h)),f=Math.min(Math.min(Math.max(r,c),Math.max(l,d)),Math.max(u,h));return!(f<0||p>f)}}const Xt=new a,Kt=[new a,new a,new a,new a,new a,new a,new a,new a];class Zt{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class we{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class G{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new a),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=ts,n=es;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new G);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,c=t.y,l=t.z,d=t.w;return e.x=s*d+o*r+n*l-i*c,e.y=n*d+o*c+i*r-s*l,e.z=i*d+o*l+s*c-n*r,e.w=o*d-s*r-n*c-i*l,e}inverse(t){t===void 0&&(t=new G);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new G),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new a);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z,l=this.w,d=l*s+r*i-c*n,u=l*n+c*s-o*i,h=l*i+o*n-r*s,p=-o*s-r*n-c*i;return e.x=d*l+p*-o+u*-c-h*-r,e.y=u*l+p*-r+h*-o-d*-c,e.z=h*l+p*-c+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,c=this.z,l=this.w;switch(e){case"YZX":const d=o*r+c*l;if(d>.499&&(s=2*Math.atan2(o,l),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,l),n=-Math.PI/2,i=0),s===void 0){const u=o*o,h=r*r,p=c*c;s=Math.atan2(2*r*l-2*o*c,1-2*h-2*p),n=Math.asin(2*d),i=Math.atan2(2*o*l-2*r*c,1-2*u-2*p)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),c=Math.sin(t/2),l=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=c*o*r+i*l*d,this.y=i*l*r-c*o*d,this.z=i*o*d+c*l*r,this.w=i*o*r-c*l*d):n==="YXZ"?(this.x=c*o*r+i*l*d,this.y=i*l*r-c*o*d,this.z=i*o*d-c*l*r,this.w=i*o*r+c*l*d):n==="ZXY"?(this.x=c*o*r-i*l*d,this.y=i*l*r+c*o*d,this.z=i*o*d+c*l*r,this.w=i*o*r-c*l*d):n==="ZYX"?(this.x=c*o*r-i*l*d,this.y=i*l*r+c*o*d,this.z=i*o*d-c*l*r,this.w=i*o*r+c*l*d):n==="YZX"?(this.x=c*o*r+i*l*d,this.y=i*l*r+c*o*d,this.z=i*o*d-c*l*r,this.w=i*o*r-c*l*d):n==="XZY"&&(this.x=c*o*r-i*l*d,this.y=i*l*r-c*o*d,this.z=i*o*d+c*l*r,this.w=i*o*r+c*l*d),this}clone(){return new G(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new G);const n=this.x,i=this.y,o=this.z,r=this.w;let c=t.x,l=t.y,d=t.z,u=t.w,h,p,f,v,y;return p=n*c+i*l+o*d+r*u,p<0&&(p=-p,c=-c,l=-l,d=-d,u=-u),1-p>1e-6?(h=Math.acos(p),f=Math.sin(h),v=Math.sin((1-e)*h)/f,y=Math.sin(e*h)/f):(v=1-e,y=e),s.x=v*n+y*c,s.y=v*i+y*l,s.z=v*o+y*d,s.w=v*r+y*u,s}integrate(t,e,s,n){n===void 0&&(n=new G);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,c=this.x,l=this.y,d=this.z,u=this.w,h=e*.5;return n.x+=h*(i*u+o*d-r*l),n.y+=h*(o*u+r*c-i*d),n.z+=h*(r*u+i*l-o*c),n.w+=h*(-i*c-o*l-r*d),n}}const ts=new a,es=new a,ss={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class T{constructor(t){t===void 0&&(t={}),this.id=T.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}T.idCounter=0;T.types=ss;class O{constructor(t){t===void 0&&(t={}),this.position=new a,this.quaternion=new G,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return O.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return O.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new a),s.vsub(t,n),e.conjugate(Qt),Qt.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new a),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new a),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new a),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const Qt=new G;class vt extends T{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:T.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new a;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let c=0;c!==r;c++){const l=(c+1)%r;e[o[c]].vsub(e[o[l]],n),n.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new a;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];vt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new a,o=new a;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,c,l){const d=new a;let u=-1,h=-Number.MAX_VALUE;for(let f=0;f<s.faces.length;f++){d.copy(s.faceNormals[f]),i.vmult(d,d);const v=d.dot(o);v>h&&(h=v,u=f)}const p=[];for(let f=0;f<s.faces[u].length;f++){const v=s.vertices[s.faces[u][f]],y=new a;y.copy(v),i.vmult(y,y),n.vadd(y,y),p.push(y)}u>=0&&this.clipFaceAgainstHull(o,t,e,p,r,c,l)}findSeparatingAxis(t,e,s,n,i,o,r,c){const l=new a,d=new a,u=new a,h=new a,p=new a,f=new a;let v=Number.MAX_VALUE;const y=this;if(y.uniqueAxes)for(let w=0;w!==y.uniqueAxes.length;w++){s.vmult(y.uniqueAxes[w],l);const m=y.testSepAxis(l,t,e,s,n,i);if(m===!1)return!1;m<v&&(v=m,o.copy(l))}else{const w=r?r.length:y.faces.length;for(let m=0;m<w;m++){const x=r?r[m]:m;l.copy(y.faceNormals[x]),s.vmult(l,l);const g=y.testSepAxis(l,t,e,s,n,i);if(g===!1)return!1;g<v&&(v=g,o.copy(l))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const m=y.testSepAxis(d,t,e,s,n,i);if(m===!1)return!1;m<v&&(v=m,o.copy(d))}else{const w=c?c.length:t.faces.length;for(let m=0;m<w;m++){const x=c?c[m]:m;d.copy(t.faceNormals[x]),i.vmult(d,d);const g=y.testSepAxis(d,t,e,s,n,i);if(g===!1)return!1;g<v&&(v=g,o.copy(d))}}for(let w=0;w!==y.uniqueEdges.length;w++){s.vmult(y.uniqueEdges[w],h);for(let m=0;m!==t.uniqueEdges.length;m++)if(i.vmult(t.uniqueEdges[m],p),h.cross(p,f),!f.almostZero()){f.normalize();const x=y.testSepAxis(f,t,e,s,n,i);if(x===!1)return!1;x<v&&(v=x,o.copy(f))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;vt.project(r,t,s,n,Ft),vt.project(e,t,i,o,Rt);const c=Ft[0],l=Ft[1],d=Rt[0],u=Rt[1];if(c<u||d<l)return!1;const h=c-u,p=d-l;return h<p?h:p}calculateLocalInertia(t,e){const s=new a,n=new a;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const c=new a,l=new a,d=new a,u=new a,h=new a,p=new a,f=new a,v=new a,y=this,w=[],m=n,x=w;let g=-1,b=Number.MAX_VALUE;for(let P=0;P<y.faces.length;P++){c.copy(y.faceNormals[P]),s.vmult(c,c);const I=c.dot(t);I<b&&(b=I,g=P)}if(g<0)return;const z=y.faces[g];z.connectedFaces=[];for(let P=0;P<y.faces.length;P++)for(let I=0;I<y.faces[P].length;I++)z.indexOf(y.faces[P][I])!==-1&&P!==g&&z.connectedFaces.indexOf(P)===-1&&z.connectedFaces.push(P);const B=z.length;for(let P=0;P<B;P++){const I=y.vertices[z[P]],q=y.vertices[z[(P+1)%B]];I.vsub(q,l),d.copy(l),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),p.copy(I),s.vmult(p,p),e.vadd(p,p);const E=z.connectedFaces[P];f.copy(this.faceNormals[E]);const S=this.getPlaneConstantOfFace(E);v.copy(f),s.vmult(v,v);const A=S-v.dot(e);for(this.clipFaceAgainstPlane(m,x,v,A);m.length;)m.shift();for(;x.length;)m.push(x.shift())}f.copy(this.faceNormals[g]);const _=this.getPlaneConstantOfFace(g);v.copy(f),s.vmult(v,v);const R=_-v.dot(e);for(let P=0;P<m.length;P++){let I=v.dot(m[P])+R;if(I<=i&&(console.log(`clamped: depth=${I} to minDist=${i}`),I=i),I<=o){const q=m[P];if(I<=1e-6){const E={point:q,normal:v,depth:I};r.push(E)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let c=t[t.length-1],l=t[0];i=s.dot(c)+n;for(let d=0;d<r;d++){if(l=t[d],o=s.dot(l)+n,i<0)if(o<0){const u=new a;u.copy(l),e.push(u)}else{const u=new a;c.lerp(l,i/(i-o),u),e.push(u)}else if(o<0){const u=new a;c.lerp(l,i/(i-o),u),e.push(u),e.push(l)}c=l,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new a);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new a);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,c,l,d,u,h=new a;for(let p=0;p<i.length;p++){h.copy(i[p]),e.vmult(h,h),t.vadd(h,h);const f=h;(o===void 0||f.x<o)&&(o=f.x),(l===void 0||f.x>l)&&(l=f.x),(r===void 0||f.y<r)&&(r=f.y),(d===void 0||f.y>d)&&(d=f.y),(c===void 0||f.z<c)&&(c=f.z),(u===void 0||f.z>u)&&(u=f.z)}s.set(o,r,c),n.set(l,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new a);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new a;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let c=n[r];const l=e[s[r][0]],d=new a;t.vsub(l,d);const u=c.dot(d),h=new a;o.vsub(l,h);const p=c.dot(h);if(u<0&&p>0||u>0&&p<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=ns;let c=0,l=0;const d=is,u=t.vertices;d.setZero(),O.vectorToLocalFrame(s,n,e,r),O.pointToLocalFrame(s,n,d,d);const h=d.dot(r);l=c=u[0].dot(r);for(let p=1;p<o;p++){const f=u[p].dot(r);f>c&&(c=f),f<l&&(l=f)}if(l-=h,c-=h,l>c){const p=l;l=c,c=p}i[0]=c,i[1]=l}}const Ft=[],Rt=[];new a;const ns=new a,is=new a;class Vt extends T{constructor(t){super({type:T.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=a,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],c=new vt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=c,c.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new a),Vt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)ot.set(i[o][0],i[o][1],i[o][2]),e.vmult(ot,ot),t.vadd(ot,ot),s(ot.x,ot.y,ot.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;Z[0].set(i.x,i.y,i.z),Z[1].set(-i.x,i.y,i.z),Z[2].set(-i.x,-i.y,i.z),Z[3].set(-i.x,-i.y,-i.z),Z[4].set(i.x,-i.y,-i.z),Z[5].set(i.x,i.y,-i.z),Z[6].set(-i.x,i.y,-i.z),Z[7].set(i.x,-i.y,i.z);const o=Z[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const c=Z[r];e.vmult(c,c),t.vadd(c,c);const l=c.x,d=c.y,u=c.z;l>n.x&&(n.x=l),d>n.y&&(n.y=d),u>n.z&&(n.z=u),l<s.x&&(s.x=l),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const ot=new a,Z=[new a,new a,new a,new a,new a,new a,new a,new a],Wt={DYNAMIC:1,STATIC:2,KINEMATIC:4},jt={AWAKE:0,SLEEPY:1,SLEEPING:2};class M extends we{constructor(t){t===void 0&&(t={}),super(),this.id=M.idCounter++,this.index=-1,this.world=null,this.vlambda=new a,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new a,this.previousPosition=new a,this.interpolatedPosition=new a,this.initPosition=new a,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new a,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new a,this.force=new a;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?M.STATIC:M.DYNAMIC,typeof t.type==typeof M.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=M.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new a,this.quaternion=new G,this.initQuaternion=new G,this.previousQuaternion=new G,this.interpolatedQuaternion=new G,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new a,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new a,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new a,this.invInertia=new a,this.invInertiaWorld=new K,this.invMassSolve=0,this.invInertiaSolve=new a,this.invInertiaWorldSolve=new K,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new a(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new a(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new W,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new a,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=M.AWAKE,this.wakeUpAfterNarrowphase=!1,t===M.SLEEPING&&this.dispatchEvent(M.wakeupEvent)}sleep(){this.sleepState=M.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===M.AWAKE&&s<n?(this.sleepState=M.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(M.sleepyEvent)):e===M.SLEEPY&&s>n?this.wakeUp():e===M.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(M.sleepEvent))}}updateSolveMassProperties(){this.sleepState===M.SLEEPING||this.type===M.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new a),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new a),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new a,i=new G;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),c=o.boundingSphereRadius;r+c>n&&(n=r+c)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=os,o=rs,r=this.quaternion,c=this.aabb,l=cs;for(let d=0;d!==n;d++){const u=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),u.calculateWorldAABB(i,o,l.lowerBound,l.upperBound),d===0?c.copy(l):c.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=as,n=ls;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new a),this.type!==M.DYNAMIC)return;this.sleepState===M.SLEEPING&&this.wakeUp();const s=ds;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new a),this.type!==M.DYNAMIC)return;const s=us,n=ps;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===M.DYNAMIC&&(this.sleepState===M.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new a),this.type!==M.DYNAMIC)return;this.sleepState===M.SLEEPING&&this.wakeUp();const s=e,n=fs;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=ms;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new a),this.type!==M.DYNAMIC)return;const s=ys,n=vs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=ws;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Vt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new a;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===M.DYNAMIC||this.type===M.KINEMATIC)||this.sleepState===M.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,c=this.torque,l=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,p=d*t;n.x+=r.x*p*h.x,n.y+=r.y*p*h.y,n.z+=r.z*p*h.z;const f=u.elements,v=this.angularFactor,y=c.x*v.x,w=c.y*v.y,m=c.z*v.z;i.x+=t*(f[0]*y+f[1]*w+f[2]*m),i.y+=t*(f[3]*y+f[4]*w+f[5]*m),i.z+=t*(f[6]*y+f[7]*w+f[8]*m),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}M.idCounter=0;M.COLLIDE_EVENT_NAME="collide";M.DYNAMIC=Wt.DYNAMIC;M.STATIC=Wt.STATIC;M.KINEMATIC=Wt.KINEMATIC;M.AWAKE=jt.AWAKE;M.SLEEPY=jt.SLEEPY;M.SLEEPING=jt.SLEEPING;M.wakeupEvent={type:"wakeup"};M.sleepyEvent={type:"sleepy"};M.sleepEvent={type:"sleep"};const os=new a,rs=new G,cs=new W,as=new K,ls=new K,hs=new K,ds=new a,us=new a,ps=new a,fs=new a,ms=new a,ys=new a,vs=new a,ws=new a;class xs{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&M.STATIC||t.sleepState===M.SLEEPING)&&(e.type&M.STATIC||e.sleepState===M.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=gs;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=bs,n=Es,i=Cs,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const c=n[r].id,l=i[r].id,d=c<l?`${c},${l}`:`${l},${c}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const c=s.keys.pop(),l=s[c];t.push(n[l]),e.push(i[l]),delete s[c]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new a;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const gs=new a;new a;new G;new a;const bs={keys:[]},Es=[],Cs=[];new a;new a;new a;class zs extends xs{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let c=0;c!==i;c++)for(let l=0;l!==c;l++)o=n[c],r=n[l],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class St{constructor(){this.rayFromWorld=new a,this.rayToWorld=new a,this.hitNormalWorld=new a,this.hitPointWorld=new a,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let xe,ge,be,Ee,Ce,ze,Ae;const Dt={CLOSEST:1,ANY:2,ALL:4};xe=T.types.SPHERE;ge=T.types.PLANE;be=T.types.BOX;Ee=T.types.CYLINDER;Ce=T.types.CONVEXPOLYHEDRON;ze=T.types.HEIGHTFIELD;Ae=T.types.TRIMESH;class D{get[xe](){return this._intersectSphere}get[ge](){return this._intersectPlane}get[be](){return this._intersectBox}get[Ee](){return this._intersectConvex}get[Ce](){return this._intersectConvex}get[ze](){return this._intersectHeightfield}get[Ae](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new a),e===void 0&&(e=new a),this.from=t.clone(),this.to=e.clone(),this.direction=new a,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=D.ANY,this.result=new St,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||D.ANY,this.result=e.result||new St,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Jt),Lt.length=0,t.broadphase.aabbQuery(t,Jt,Lt),this.intersectBodies(Lt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const n=As,i=Bs;for(let o=0,r=t.shapes.length;o<r;o++){const c=t.shapes[o];if(!(s&&!c.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(c,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(Vs(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,c=this.direction,l=new a(0,0,1);e.vmult(l,l);const d=new a;o.vsub(s,d);const u=d.dot(l);r.vsub(s,d);const h=d.dot(l);if(u*h>0||o.distanceTo(r)<u)return;const p=l.dot(c);if(Math.abs(p)<this.precision)return;const f=new a,v=new a,y=new a;o.vsub(s,f);const w=-l.dot(f)/p;c.scale(w,v),o.vadd(v,y),this.reportIntersection(l,y,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=Ss;o.from.copy(this.from),o.to.copy(this.to),O.pointToLocalFrame(s,e,o.from,o.from),O.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=Ts;let c,l,d,u;c=l=0,d=u=t.data.length-1;const h=new W;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),c=Math.max(c,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let p=c;p<d;p++)for(let f=l;f<u;f++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(p,f,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(p,f,!1),O.pointToWorldFrame(s,e,t.pillarOffset,gt),this._intersectConvex(t.pillarConvex,e,gt,n,i,te),this.result.shouldStop)return;t.getConvexTrianglePillar(p,f,!0),O.pointToWorldFrame(s,e,t.pillarOffset,gt),this._intersectConvex(t.pillarConvex,e,gt,n,i,te)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,c=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-c**2,h=d**2-4*l*u,p=Ms,f=Ps;if(!(h<0))if(h===0)o.lerp(r,h,p),p.vsub(s,f),f.normalize(),this.reportIntersection(f,p,i,n,-1);else{const v=(-d-Math.sqrt(h))/(2*l),y=(-d+Math.sqrt(h))/(2*l);if(v>=0&&v<=1&&(o.lerp(r,v,p),p.vsub(s,f),f.normalize(),this.reportIntersection(f,p,i,n,-1)),this.result.shouldStop)return;y>=0&&y<=1&&(o.lerp(r,y,p),p.vsub(s,f),f.normalize(),this.reportIntersection(f,p,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=_s,c=ee,l=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,p=this.direction,f=this.from,v=this.to,y=f.distanceTo(v),w=l?l.length:d.length,m=this.result;for(let x=0;!m.shouldStop&&x<w;x++){const g=l?l[x]:x,b=d[g],z=h[g],B=e,_=s;c.copy(u[b[0]]),B.vmult(c,c),c.vadd(_,c),c.vsub(f,c),B.vmult(z,r);const R=p.dot(r);if(Math.abs(R)<this.precision)continue;const P=r.dot(c)/R;if(!(P<0)){p.scale(P,$),$.vadd(f,$),X.copy(u[b[0]]),B.vmult(X,X),_.vadd(X,X);for(let I=1;!m.shouldStop&&I<b.length-1;I++){Q.copy(u[b[I]]),J.copy(u[b[I+1]]),B.vmult(Q,Q),B.vmult(J,J),_.vadd(Q,Q),_.vadd(J,J);const q=$.distanceTo(f);!(D.pointInTriangle($,X,Q,J)||D.pointInTriangle($,Q,X,J))||q>y||this.reportIntersection(r,$,i,n,g)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=Ns,c=ks,l=Os,d=ee,u=Is,h=Fs,p=Rs,f=qs,v=Ls,y=t.indices;t.vertices;const w=this.from,m=this.to,x=this.direction;l.position.copy(s),l.quaternion.copy(e),O.vectorToLocalFrame(s,e,x,u),O.pointToLocalFrame(s,e,w,h),O.pointToLocalFrame(s,e,m,p),p.x*=t.scale.x,p.y*=t.scale.y,p.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,p.vsub(h,u),u.normalize();const g=h.distanceSquared(p);t.tree.rayQuery(this,l,c);for(let b=0,z=c.length;!this.result.shouldStop&&b!==z;b++){const B=c[b];t.getNormal(B,r),t.getVertex(y[B*3],X),X.vsub(h,d);const _=u.dot(r),R=r.dot(d)/_;if(R<0)continue;u.scale(R,$),$.vadd(h,$),t.getVertex(y[B*3+1],Q),t.getVertex(y[B*3+2],J);const P=$.distanceSquared(h);!(D.pointInTriangle($,Q,X,J)||D.pointInTriangle($,X,Q,J))||P>g||(O.vectorToWorldFrame(e,r,v),O.pointToWorldFrame(s,e,$,f),this.reportIntersection(v,f,i,n,B))}c.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,c=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case D.ALL:this.hasHit=!0,l.set(o,r,t,e,s,n,c),l.hasHit=!0,this.callback(l);break;case D.CLOSEST:(c<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,c));break;case D.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,c),l.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,lt),s.vsub(e,pt),t.vsub(e,qt);const i=lt.dot(lt),o=lt.dot(pt),r=lt.dot(qt),c=pt.dot(pt),l=pt.dot(qt);let d,u;return(d=c*r-o*l)>=0&&(u=i*l-o*r)>=0&&d+u<i*c-o*o}}D.CLOSEST=Dt.CLOSEST;D.ANY=Dt.ANY;D.ALL=Dt.ALL;const Jt=new W,Lt=[],pt=new a,qt=new a,As=new a,Bs=new G,$=new a,X=new a,Q=new a,J=new a;new a;new St;const te={faceList:[0]},gt=new a,Ss=new D,Ts=[],Ms=new a,Ps=new a,_s=new a;new a;new a;const ee=new a,Ns=new a,Is=new a,Fs=new a,Rs=new a,Ls=new a,qs=new a;new W;const ks=[],Os=new O,lt=new a,bt=new a;function Vs(F,t,e){e.vsub(F,lt);const s=lt.dot(t);return t.scale(s,bt),bt.vadd(F,bt),e.distanceTo(bt)}class Ws{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class se{constructor(){this.spatial=new a,this.rotational=new a}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class wt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=wt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new se,this.jacobianElementB=new se,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,c=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,c=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,c=n.torque,l=s.invMassSolve,d=n.invMassSolve;return i.scale(l,ne),r.scale(d,ie),s.invInertiaWorldSolve.vmult(o,oe),n.invInertiaWorldSolve.vmult(c,re),t.multiplyVectors(ne,oe)+e.multiplyVectors(ie,re)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,c=n.invInertiaWorldSolve;let l=i+o;return r.vmult(t.rotational,Et),l+=Et.dot(t.rotational),c.vmult(e.rotational,Et),l+=Et.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=js;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}wt.idCounter=0;const ne=new a,ie=new a,oe=new a,re=new a,Et=new a,js=new a;class Ds extends wt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new a,this.rj=new a,this.ni=new a}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,c=Gs,l=Hs,d=n.velocity,u=n.angularVelocity;n.force,n.torque;const h=i.velocity,p=i.angularVelocity;i.force,i.torque;const f=Us,v=this.jacobianElementA,y=this.jacobianElementB,w=this.ni;o.cross(w,c),r.cross(w,l),w.negate(v.spatial),c.negate(v.rotational),y.spatial.copy(w),y.rotational.copy(l),f.copy(i.position),f.vadd(r,f),f.vsub(n.position,f),f.vsub(o,f);const m=w.dot(f),x=this.restitution+1,g=x*h.dot(w)-x*d.dot(w)+p.dot(l)-u.dot(c),b=this.computeGiMf();return-m*e-g*s-t*b}getImpactVelocityAlongNormal(){const t=Ys,e=$s,s=Xs,n=Ks,i=Zs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Gs=new a,Hs=new a,Us=new a,Ys=new a,$s=new a,Xs=new a,Ks=new a,Zs=new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class ce extends wt{constructor(t,e,s){super(t,e,-s,s),this.ri=new a,this.rj=new a,this.t=new a}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Qs,o=Js,r=this.t;s.cross(r,i),n.cross(r,o);const c=this.jacobianElementA,l=this.jacobianElementB;r.negate(c.spatial),i.negate(c.rotational),l.spatial.copy(r),l.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const Qs=new a,Js=new a;class Mt{constructor(t,e,s){s=Ws.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Mt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Mt.idCounter=0;class Pt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Pt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}Pt.idCounter=0;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new D;new a;new a;new a;new a(1,0,0),new a(0,1,0),new a(0,0,1);new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class tn extends T{constructor(t){if(super({type:T.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new a);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const c=o[r];s[c]=t[c]-i,n[c]=t[c]+i}}}new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class tt{constructor(t){t===void 0&&(t={}),this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new W,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s){s===void 0&&(s=0);const n=this.data;if(!this.aabb.contains(t))return!1;const i=this.children,o=this.maxDepth||this.root.maxDepth;if(s<o){let r=!1;i.length||(this.subdivide(),r=!0);for(let c=0;c!==8;c++)if(i[c].insert(t,e,s+1))return!0;r&&(i.length=0)}return n.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,n=this.children;n.push(new tt({aabb:new W({lowerBound:new a(0,0,0)})}),new tt({aabb:new W({lowerBound:new a(1,0,0)})}),new tt({aabb:new W({lowerBound:new a(1,1,0)})}),new tt({aabb:new W({lowerBound:new a(1,1,1)})}),new tt({aabb:new W({lowerBound:new a(0,1,1)})}),new tt({aabb:new W({lowerBound:new a(0,0,1)})}),new tt({aabb:new W({lowerBound:new a(1,0,1)})}),new tt({aabb:new W({lowerBound:new a(0,1,0)})})),s.vsub(e,rt),rt.scale(.5,rt);const i=this.root||this;for(let o=0;o!==8;o++){const r=n[o];r.root=i;const c=r.aabb.lowerBound;c.x*=rt.x,c.y*=rt.y,c.z*=rt.z,c.vadd(e,c),c.vadd(rt,r.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];for(;s.length;){const n=s.pop();n.aabb.overlaps(t)&&Array.prototype.push.apply(e,n.data),Array.prototype.push.apply(s,n.children)}return e}rayQuery(t,e,s){return t.getAABB(Ct),Ct.toLocalFrame(e,Ct),this.aabbQuery(Ct,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),!this.children[t].children.length&&!this.children[t].data.length&&this.children.splice(t,1)}}class en extends tt{constructor(t,e){e===void 0&&(e={}),super({root:null,aabb:t}),this.maxDepth=typeof e.maxDepth<"u"?e.maxDepth:8}}const rt=new a,Ct=new W;class Tt extends T{constructor(t,e){super({type:T.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new W,this.edges=null,this.scale=new a(1,1,1),this.tree=new en,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new W,n=new a,i=new a,o=new a,r=[n,i,o];for(let c=0;c<this.indices.length/3;c++){const l=c*3;this._getUnscaledVertex(this.indices[l],n),this._getUnscaledVertex(this.indices[l+1],i),this._getUnscaledVertex(this.indices[l+2],o),s.setFromPoints(r),t.insert(s,c)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){zt.copy(t);const s=this.scale,n=s.x,i=s.y,o=s.z,r=zt.lowerBound,c=zt.upperBound;return r.x/=n,r.y/=i,r.z/=o,c.x/=n,c.y/=i,c.z/=o,this.tree.aabbQuery(zt,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=sn,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const n=s*3,i=this.indices[n],o=this.indices[n+1],r=this.indices[n+2];this.getVertex(i,he),this.getVertex(o,de),this.getVertex(r,ue),Tt.computeNormal(de,he,ue,t),e[n]=t.x,e[n+1]=t.y,e[n+2]=t.z}}updateEdges(){const t={},e=(n,i)=>{const o=n<i?`${n}_${i}`:`${i}_${n}`;t[o]=!0};for(let n=0;n<this.indices.length/3;n++){const i=n*3,o=this.indices[i],r=this.indices[i+1],c=this.indices[i+2];e(o,r),e(r,c),e(c,o)}const s=Object.keys(t);this.edges=new Int16Array(s.length*2);for(let n=0;n<s.length;n++){const i=s[n].split("_");this.edges[2*n]=parseInt(i[0],10),this.edges[2*n+1]=parseInt(i[1],10)}}getEdgeVertex(t,e,s){const n=this.edges[t*2+(e?1:0)];this.getVertex(n,s)}getEdgeVector(t,e){const s=nn,n=on;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,n),n.vsub(s,e)}static computeNormal(t,e,s,n){e.vsub(t,le),s.vsub(e,ae),ae.cross(le,n),n.isZero()||n.normalize()}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=t*3,n=this.vertices;return e.set(n[s],n[s+1],n[s+2])}getWorldVertex(t,e,s,n){return this.getVertex(t,n),O.pointToWorldFrame(e,s,n,n),n}getTriangleVertices(t,e,s,n){const i=t*3;this.getVertex(this.indices[i],e),this.getVertex(this.indices[i+1],s),this.getVertex(this.indices[i+2],n)}getNormal(t,e){const s=t*3;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(ct);const s=ct.upperBound.x-ct.lowerBound.x,n=ct.upperBound.y-ct.lowerBound.y,i=ct.upperBound.z-ct.lowerBound.z;return e.set(1/12*t*(2*n*2*n+2*i*2*i),1/12*t*(2*s*2*s+2*i*2*i),1/12*t*(2*n*2*n+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,n=this.vertices.length;this.vertices;const i=rn;this.getVertex(0,i),e.copy(i),s.copy(i);for(let o=0;o!==n;o++)this.getVertex(o,i),i.x<e.x?e.x=i.x:i.x>s.x&&(s.x=i.x),i.y<e.y?e.y=i.y:i.y>s.y&&(s.y=i.y),i.z<e.z?e.z=i.z:i.z>s.z&&(s.z=i.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new a;for(let n=0,i=e.length/3;n!==i;n++){this.getVertex(n,s);const o=s.lengthSquared();o>t&&(t=o)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=cn,o=an;i.position=t,i.quaternion=e,this.aabb.toWorldFrame(i,o),s.copy(o.lowerBound),n.copy(o.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}static createTorus(t,e,s,n,i){t===void 0&&(t=1),e===void 0&&(e=.5),s===void 0&&(s=8),n===void 0&&(n=6),i===void 0&&(i=Math.PI*2);const o=[],r=[];for(let c=0;c<=s;c++)for(let l=0;l<=n;l++){const d=l/n*i,u=c/s*Math.PI*2,h=(t+e*Math.cos(u))*Math.cos(d),p=(t+e*Math.cos(u))*Math.sin(d),f=e*Math.sin(u);o.push(h,p,f)}for(let c=1;c<=s;c++)for(let l=1;l<=n;l++){const d=(n+1)*c+l-1,u=(n+1)*(c-1)+l-1,h=(n+1)*(c-1)+l,p=(n+1)*c+l;r.push(d,u,p),r.push(u,h,p)}return new Tt(o,r)}}const sn=new a,zt=new W,nn=new a,on=new a,ae=new a,le=new a,he=new a,de=new a,ue=new a,ct=new W,rn=new a,cn=new O,an=new W;class ln{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class hn extends ln{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,c=e.bodies,l=c.length,d=t;let u,h,p,f,v,y;if(r!==0)for(let g=0;g!==l;g++)c[g].updateSolveMassProperties();const w=un,m=pn,x=dn;w.length=r,m.length=r,x.length=r;for(let g=0;g!==r;g++){const b=o[g];x[g]=0,m[g]=b.computeB(d),w[g]=1/b.computeC()}if(r!==0){for(let z=0;z!==l;z++){const B=c[z],_=B.vlambda,R=B.wlambda;_.set(0,0,0),R.set(0,0,0)}for(s=0;s!==n;s++){f=0;for(let z=0;z!==r;z++){const B=o[z];u=m[z],h=w[z],y=x[z],v=B.computeGWlambda(),p=h*(u-v-B.eps*y),y+p<B.minForce?p=B.minForce-y:y+p>B.maxForce&&(p=B.maxForce-y),x[z]+=p,f+=p>0?p:-p,B.addToWlambda(p)}if(f*f<i)break}for(let z=0;z!==l;z++){const B=c[z],_=B.velocity,R=B.angularVelocity;B.vlambda.vmul(B.linearFactor,B.vlambda),_.vadd(B.vlambda,_),B.wlambda.vmul(B.angularFactor,B.wlambda),R.vadd(B.wlambda,R)}let g=o.length;const b=1/d;for(;g--;)o[g].multiplier=x[g]*b}return s}}const dn=[],un=[],pn=[];M.STATIC;class fn{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class mn extends fn{constructor(){super(...arguments),this.type=a}constructObject(){return new a}}const V={sphereSphere:T.types.SPHERE,spherePlane:T.types.SPHERE|T.types.PLANE,boxBox:T.types.BOX|T.types.BOX,sphereBox:T.types.SPHERE|T.types.BOX,planeBox:T.types.PLANE|T.types.BOX,convexConvex:T.types.CONVEXPOLYHEDRON,sphereConvex:T.types.SPHERE|T.types.CONVEXPOLYHEDRON,planeConvex:T.types.PLANE|T.types.CONVEXPOLYHEDRON,boxConvex:T.types.BOX|T.types.CONVEXPOLYHEDRON,sphereHeightfield:T.types.SPHERE|T.types.HEIGHTFIELD,boxHeightfield:T.types.BOX|T.types.HEIGHTFIELD,convexHeightfield:T.types.CONVEXPOLYHEDRON|T.types.HEIGHTFIELD,sphereParticle:T.types.PARTICLE|T.types.SPHERE,planeParticle:T.types.PLANE|T.types.PARTICLE,boxParticle:T.types.BOX|T.types.PARTICLE,convexParticle:T.types.PARTICLE|T.types.CONVEXPOLYHEDRON,cylinderCylinder:T.types.CYLINDER,sphereCylinder:T.types.SPHERE|T.types.CYLINDER,planeCylinder:T.types.PLANE|T.types.CYLINDER,boxCylinder:T.types.BOX|T.types.CYLINDER,convexCylinder:T.types.CONVEXPOLYHEDRON|T.types.CYLINDER,heightfieldCylinder:T.types.HEIGHTFIELD|T.types.CYLINDER,particleCylinder:T.types.PARTICLE|T.types.CYLINDER,sphereTrimesh:T.types.SPHERE|T.types.TRIMESH,planeTrimesh:T.types.PLANE|T.types.TRIMESH};class yn{get[V.sphereSphere](){return this.sphereSphere}get[V.spherePlane](){return this.spherePlane}get[V.boxBox](){return this.boxBox}get[V.sphereBox](){return this.sphereBox}get[V.planeBox](){return this.planeBox}get[V.convexConvex](){return this.convexConvex}get[V.sphereConvex](){return this.sphereConvex}get[V.planeConvex](){return this.planeConvex}get[V.boxConvex](){return this.boxConvex}get[V.sphereHeightfield](){return this.sphereHeightfield}get[V.boxHeightfield](){return this.boxHeightfield}get[V.convexHeightfield](){return this.convexHeightfield}get[V.sphereParticle](){return this.sphereParticle}get[V.planeParticle](){return this.planeParticle}get[V.boxParticle](){return this.boxParticle}get[V.convexParticle](){return this.convexParticle}get[V.cylinderCylinder](){return this.convexConvex}get[V.sphereCylinder](){return this.sphereConvex}get[V.planeCylinder](){return this.planeConvex}get[V.boxCylinder](){return this.boxConvex}get[V.convexCylinder](){return this.convexConvex}get[V.heightfieldCylinder](){return this.heightfieldCylinder}get[V.particleCylinder](){return this.particleCylinder}get[V.sphereTrimesh](){return this.sphereTrimesh}get[V.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new mn,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Ds(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const c=this.currentContactMaterial;r.restitution=c.restitution,r.setSpookParams(c.contactEquationStiffness,c.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,d=n.material||e.material;return l&&d&&l.restitution>=0&&d.restitution>=0&&(r.restitution=l.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,c=this.currentContactMaterial;let l=c.friction;const d=i.material||s.material,u=o.material||n.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(l=d.friction*u.friction),l>0){const h=l*(r.frictionGravity||r.gravity).length();let p=s.invMass+n.invMass;p>0&&(p=1/p);const f=this.frictionEquationPool,v=f.length?f.pop():new ce(s,n,h*p),y=f.length?f.pop():new ce(s,n,h*p);return v.bi=y.bi=s,v.bj=y.bj=n,v.minForce=y.minForce=-h*p,v.maxForce=y.maxForce=h*p,v.ri.copy(t.ri),v.rj.copy(t.rj),y.ri.copy(t.ri),y.rj.copy(t.rj),t.ni.tangents(v.t,y.t),v.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),y.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),v.enabled=y.enabled=t.enabled,e.push(v,y),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];at.setZero(),dt.setZero(),ut.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(at.vadd(e.ni,at),dt.vadd(e.ri,dt),ut.vadd(e.rj,ut)):(at.vsub(e.ni,at),dt.vadd(e.rj,dt),ut.vadd(e.ri,ut));const o=1/t;dt.scale(o,s.ri),ut.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),at.normalize(),at.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const c=xn,l=gn,d=vn,u=wn;for(let h=0,p=t.length;h!==p;h++){const f=t[h],v=e[h];let y=null;f.material&&v.material&&(y=s.getContactMaterial(f.material,v.material)||null);const w=f.type&M.KINEMATIC&&v.type&M.STATIC||f.type&M.STATIC&&v.type&M.KINEMATIC||f.type&M.KINEMATIC&&v.type&M.KINEMATIC;for(let m=0;m<f.shapes.length;m++){f.quaternion.mult(f.shapeOrientations[m],c),f.quaternion.vmult(f.shapeOffsets[m],d),d.vadd(f.position,d);const x=f.shapes[m];for(let g=0;g<v.shapes.length;g++){v.quaternion.mult(v.shapeOrientations[g],l),v.quaternion.vmult(v.shapeOffsets[g],u),u.vadd(v.position,u);const b=v.shapes[g];if(!(x.collisionFilterMask&b.collisionFilterGroup&&b.collisionFilterMask&x.collisionFilterGroup)||d.distanceTo(u)>x.boundingSphereRadius+b.boundingSphereRadius)continue;let z=null;x.material&&b.material&&(z=s.getContactMaterial(x.material,b.material)||null),this.currentContactMaterial=z||y||s.defaultContactMaterial;const B=x.type|b.type,_=this[B];if(_){let R=!1;x.type<b.type?R=_.call(this,x,b,d,u,c,l,f,v,x,b,w):R=_.call(this,b,x,u,d,l,c,v,f,x,b,w),R&&w&&(s.shapeOverlapKeeper.set(x.id,b.id),s.bodyOverlapKeeper.set(f.id,v.id))}}}}}sphereSphere(t,e,s,n,i,o,r,c,l,d,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,c,t,e,l,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(c.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,c,l,d,u){const h=this.createContactEquation(r,c,t,e,l,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,At),h.ni.scale(h.ni.dot(At),pe),At.vsub(pe,h.rj),-At.dot(h.ni)<=t.radius){if(u)return!0;const p=h.ri,f=h.rj;p.vadd(s,p),p.vsub(r.position,p),f.vadd(n,f),f.vsub(c.position,f),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}sphereBox(t,e,s,n,i,o,r,c,l,d,u){const h=this.v3pool,p=Un;s.vsub(n,Bt),e.getSideNormals(p,o);const f=t.radius;let v=!1;const y=$n,w=Xn,m=Kn;let x=null,g=0,b=0,z=0,B=null;for(let C=0,j=p.length;C!==j&&v===!1;C++){const L=Dn;L.copy(p[C]);const k=L.length();L.normalize();const Y=Bt.dot(L);if(Y<k+f&&Y>0){const U=Gn,N=Hn;U.copy(p[(C+1)%3]),N.copy(p[(C+2)%3]);const ht=U.length(),xt=N.length();U.normalize(),N.normalize();const _t=Bt.dot(U),Nt=Bt.dot(N);if(_t<ht&&_t>-ht&&Nt<xt&&Nt>-xt){const Gt=Math.abs(Y-k-f);if((B===null||Gt<B)&&(B=Gt,b=_t,z=Nt,x=k,y.copy(L),w.copy(U),m.copy(N),g++,u))return!0}}}if(g){v=!0;const C=this.createContactEquation(r,c,t,e,l,d);y.scale(-f,C.ri),C.ni.copy(y),C.ni.negate(C.ni),y.scale(x,y),w.scale(b,w),y.vadd(w,y),m.scale(z,m),y.vadd(m,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(c.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}let _=h.get();const R=Yn;for(let C=0;C!==2&&!v;C++)for(let j=0;j!==2&&!v;j++)for(let L=0;L!==2&&!v;L++)if(_.set(0,0,0),C?_.vadd(p[0],_):_.vsub(p[0],_),j?_.vadd(p[1],_):_.vsub(p[1],_),L?_.vadd(p[2],_):_.vsub(p[2],_),n.vadd(_,R),R.vsub(s,R),R.lengthSquared()<f*f){if(u)return!0;v=!0;const k=this.createContactEquation(r,c,t,e,l,d);k.ri.copy(R),k.ri.normalize(),k.ni.copy(k.ri),k.ri.scale(f,k.ri),k.rj.copy(_),k.ri.vadd(s,k.ri),k.ri.vsub(r.position,k.ri),k.rj.vadd(n,k.rj),k.rj.vsub(c.position,k.rj),this.result.push(k),this.createFrictionEquationsFromContact(k,this.frictionResult)}h.release(_),_=null;const P=h.get(),I=h.get(),q=h.get(),E=h.get(),S=h.get(),A=p.length;for(let C=0;C!==A&&!v;C++)for(let j=0;j!==A&&!v;j++)if(C%3!==j%3){p[j].cross(p[C],P),P.normalize(),p[C].vadd(p[j],I),q.copy(s),q.vsub(I,q),q.vsub(n,q);const L=q.dot(P);P.scale(L,E);let k=0;for(;k===C%3||k===j%3;)k++;S.copy(s),S.vsub(E,S),S.vsub(I,S),S.vsub(n,S);const Y=Math.abs(L),U=S.length();if(Y<p[k].length()&&U<f){if(u)return!0;v=!0;const N=this.createContactEquation(r,c,t,e,l,d);I.vadd(E,N.rj),N.rj.copy(N.rj),S.negate(N.ni),N.ni.normalize(),N.ri.copy(N.rj),N.ri.vadd(n,N.ri),N.ri.vsub(s,N.ri),N.ri.normalize(),N.ri.scale(f,N.ri),N.ri.vadd(s,N.ri),N.ri.vsub(r.position,N.ri),N.rj.vadd(n,N.rj),N.rj.vsub(c.position,N.rj),this.result.push(N),this.createFrictionEquationsFromContact(N,this.frictionResult)}}h.release(P,I,q,E,S)}planeBox(t,e,s,n,i,o,r,c,l,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}convexConvex(t,e,s,n,i,o,r,c,l,d,u,h,p){const f=di;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,f,h,p)){const v=[],y=ui;t.clipAgainstHull(s,i,e,n,o,f,-100,100,v);let w=0;for(let m=0;m!==v.length;m++){if(u)return!0;const x=this.createContactEquation(r,c,t,e,l,d),g=x.ri,b=x.rj;f.negate(x.ni),v[m].normal.negate(y),y.scale(v[m].depth,y),v[m].point.vadd(y,g),b.copy(v[m].point),g.vsub(s,g),b.vsub(n,b),g.vadd(s,g),g.vsub(r.position,g),b.vadd(n,b),b.vsub(c.position,b),this.result.push(x),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,c,l,d,u){const h=this.v3pool;s.vsub(n,Zn);const p=e.faceNormals,f=e.faces,v=e.vertices,y=t.radius;let w=!1;for(let m=0;m!==v.length;m++){const x=v[m],g=ei;o.vmult(x,g),n.vadd(g,g);const b=ti;if(g.vsub(s,b),b.lengthSquared()<y*y){if(u)return!0;w=!0;const z=this.createContactEquation(r,c,t,e,l,d);z.ri.copy(b),z.ri.normalize(),z.ni.copy(z.ri),z.ri.scale(y,z.ri),g.vsub(n,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(n,z.rj),z.rj.vsub(c.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult);return}}for(let m=0,x=f.length;m!==x&&w===!1;m++){const g=p[m],b=f[m],z=si;o.vmult(g,z);const B=ni;o.vmult(v[b[0]],B),B.vadd(n,B);const _=ii;z.scale(-y,_),s.vadd(_,_);const R=oi;_.vsub(B,R);const P=R.dot(z),I=ri;if(s.vsub(B,I),P<0&&I.dot(z)>0){const q=[];for(let E=0,S=b.length;E!==S;E++){const A=h.get();o.vmult(v[b[E]],A),n.vadd(A,A),q.push(A)}if(jn(q,z,s)){if(u)return!0;w=!0;const E=this.createContactEquation(r,c,t,e,l,d);z.scale(-y,E.ri),z.negate(E.ni);const S=h.get();z.scale(-P,S);const A=h.get();z.scale(-y,A),s.vsub(n,E.rj),E.rj.vadd(A,E.rj),E.rj.vadd(S,E.rj),E.rj.vadd(n,E.rj),E.rj.vsub(c.position,E.rj),E.ri.vadd(s,E.ri),E.ri.vsub(r.position,E.ri),h.release(S),h.release(A),this.result.push(E),this.createFrictionEquationsFromContact(E,this.frictionResult);for(let C=0,j=q.length;C!==j;C++)h.release(q[C]);return}else for(let E=0;E!==b.length;E++){const S=h.get(),A=h.get();o.vmult(v[b[(E+1)%b.length]],S),o.vmult(v[b[(E+2)%b.length]],A),n.vadd(S,S),n.vadd(A,A);const C=Qn;A.vsub(S,C);const j=Jn;C.unit(j);const L=h.get(),k=h.get();s.vsub(S,k);const Y=k.dot(j);j.scale(Y,L),L.vadd(S,L);const U=h.get();if(L.vsub(s,U),Y>0&&Y*Y<C.lengthSquared()&&U.lengthSquared()<y*y){if(u)return!0;const N=this.createContactEquation(r,c,t,e,l,d);L.vsub(n,N.rj),L.vsub(s,N.ni),N.ni.normalize(),N.ni.scale(y,N.ri),N.rj.vadd(n,N.rj),N.rj.vsub(c.position,N.rj),N.ri.vadd(s,N.ri),N.ri.vsub(r.position,N.ri),this.result.push(N),this.createFrictionEquationsFromContact(N,this.frictionResult);for(let ht=0,xt=q.length;ht!==xt;ht++)h.release(q[ht]);h.release(S),h.release(A),h.release(L),h.release(U),h.release(k);return}h.release(S),h.release(A),h.release(L),h.release(U),h.release(k)}for(let E=0,S=q.length;E!==S;E++)h.release(q[E])}}}planeConvex(t,e,s,n,i,o,r,c,l,d,u){const h=ci,p=ai;p.set(0,0,1),i.vmult(p,p);let f=0;const v=li;for(let y=0;y!==e.vertices.length;y++)if(h.copy(e.vertices[y]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,v),p.dot(v)<=0){if(u)return!0;const m=this.createContactEquation(r,c,t,e,l,d),x=hi;p.scale(p.dot(v),x),h.vsub(x,x),x.vsub(s,m.ri),m.ni.copy(p),h.vsub(n,m.rj),m.ri.vadd(s,m.ri),m.ri.vsub(r.position,m.ri),m.rj.vadd(n,m.rj),m.rj.vsub(c.position,m.rj),this.result.push(m),f++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(m,this.frictionResult)}this.enableFrictionReduction&&f&&this.createFrictionFromAverage(f)}boxConvex(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,c,l,d,u){const h=e.data,p=t.radius,f=e.elementSize,v=zi,y=Ci;O.pointToLocalFrame(n,o,s,y);let w=Math.floor((y.x-p)/f)-1,m=Math.ceil((y.x+p)/f)+1,x=Math.floor((y.y-p)/f)-1,g=Math.ceil((y.y+p)/f)+1;if(m<0||g<0||w>h.length||x>h[0].length)return;w<0&&(w=0),m<0&&(m=0),x<0&&(x=0),g<0&&(g=0),w>=h.length&&(w=h.length-1),m>=h.length&&(m=h.length-1),g>=h[0].length&&(g=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const b=[];e.getRectMinMax(w,x,m,g,b);const z=b[0],B=b[1];if(y.z-p>B||y.z+p<z)return;const _=this.result;for(let R=w;R<m;R++)for(let P=x;P<g;P++){const I=_.length;let q=!1;if(e.getConvexTrianglePillar(R,P,!1),O.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(q=this.sphereConvex(t,e.pillarConvex,s,v,i,o,r,c,t,e,u)),u&&q||(e.getConvexTrianglePillar(R,P,!0),O.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(q=this.sphereConvex(t,e.pillarConvex,s,v,i,o,r,c,t,e,u)),u&&q))return!0;if(_.length-I>2)return}}boxHeightfield(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,c,l,d,u){const h=e.data,p=e.elementSize,f=t.boundingSphereRadius,v=bi,y=Ei,w=gi;O.pointToLocalFrame(n,o,s,w);let m=Math.floor((w.x-f)/p)-1,x=Math.ceil((w.x+f)/p)+1,g=Math.floor((w.y-f)/p)-1,b=Math.ceil((w.y+f)/p)+1;if(x<0||b<0||m>h.length||g>h[0].length)return;m<0&&(m=0),x<0&&(x=0),g<0&&(g=0),b<0&&(b=0),m>=h.length&&(m=h.length-1),x>=h.length&&(x=h.length-1),b>=h[0].length&&(b=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const z=[];e.getRectMinMax(m,g,x,b,z);const B=z[0],_=z[1];if(!(w.z-f>_||w.z+f<B))for(let R=m;R<x;R++)for(let P=g;P<b;P++){let I=!1;if(e.getConvexTrianglePillar(R,P,!1),O.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(I=this.convexConvex(t,e.pillarConvex,s,v,i,o,r,c,null,null,u,y,null)),u&&I||(e.getConvexTrianglePillar(R,P,!0),O.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(I=this.convexConvex(t,e.pillarConvex,s,v,i,o,r,c,null,null,u,y,null)),u&&I))return!0}}sphereParticle(t,e,s,n,i,o,r,c,l,d,u){const h=yi;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const f=this.createContactEquation(c,r,e,t,l,d);h.normalize(),f.rj.copy(h),f.rj.scale(t.radius,f.rj),f.ni.copy(h),f.ni.negate(f.ni),f.ri.set(0,0,0),this.result.push(f),this.createFrictionEquationsFromContact(f,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,c,l,d,u){const h=pi;h.set(0,0,1),r.quaternion.vmult(h,h);const p=fi;if(n.vsub(r.position,p),h.dot(p)<=0){if(u)return!0;const v=this.createContactEquation(c,r,e,t,l,d);v.ni.copy(h),v.ni.negate(v.ni),v.ri.set(0,0,0);const y=mi;h.scale(h.dot(n),y),n.vsub(y,y),v.rj.copy(y),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexParticle(t,e,s,n,i,o,r,c,l,d,u){let h=-1;const p=wi,f=xi;let v=null;const y=vi;if(y.copy(n),y.vsub(s,y),i.conjugate(fe),fe.vmult(y,y),t.pointIsInside(y)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,m=t.faces.length;w!==m;w++){const x=[t.worldVertices[t.faces[w][0]]],g=t.worldFaceNormals[w];n.vsub(x[0],me);const b=-g.dot(me);if(v===null||Math.abs(b)<Math.abs(v)){if(u)return!0;v=b,h=w,p.copy(g)}}if(h!==-1){const w=this.createContactEquation(c,r,e,t,l,d);p.scale(v,f),f.vadd(n,f),f.vsub(s,f),w.rj.copy(f),p.negate(w.ni),w.ri.set(0,0,0);const m=w.ri,x=w.rj;m.vadd(n,m),m.vsub(c.position,m),x.vadd(s,x),x.vsub(r.position,x),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,c,l,d,u){return this.convexHeightfield(e,t,n,s,o,i,c,r,l,d,u)}particleCylinder(t,e,s,n,i,o,r,c,l,d,u){return this.convexParticle(e,t,n,s,o,i,c,r,l,d,u)}sphereTrimesh(t,e,s,n,i,o,r,c,l,d,u){const h=Tn,p=Mn,f=Pn,v=_n,y=Nn,w=In,m=qn,x=Sn,g=An,b=kn;O.pointToLocalFrame(n,o,s,y);const z=t.radius;m.lowerBound.set(y.x-z,y.y-z,y.z-z),m.upperBound.set(y.x+z,y.y+z,y.z+z),e.getTrianglesInAABB(m,b);const B=Bn,_=t.radius*t.radius;for(let E=0;E<b.length;E++)for(let S=0;S<3;S++)if(e.getVertex(e.indices[b[E]*3+S],B),B.vsub(y,g),g.lengthSquared()<=_){if(x.copy(B),O.pointToWorldFrame(n,o,x,B),B.vsub(s,g),u)return!0;let A=this.createContactEquation(r,c,t,e,l,d);A.ni.copy(g),A.ni.normalize(),A.ri.copy(A.ni),A.ri.scale(t.radius,A.ri),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),A.rj.copy(B),A.rj.vsub(c.position,A.rj),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult)}for(let E=0;E<b.length;E++)for(let S=0;S<3;S++){e.getVertex(e.indices[b[E]*3+S],h),e.getVertex(e.indices[b[E]*3+(S+1)%3],p),p.vsub(h,f),y.vsub(p,w);const A=w.dot(f);y.vsub(h,w);let C=w.dot(f);if(C>0&&A<0&&(y.vsub(h,w),v.copy(f),v.normalize(),C=w.dot(v),v.scale(C,w),w.vadd(h,w),w.distanceTo(y)<t.radius)){if(u)return!0;const L=this.createContactEquation(r,c,t,e,l,d);w.vsub(y,L.ni),L.ni.normalize(),L.ni.scale(t.radius,L.ri),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),O.pointToWorldFrame(n,o,w,w),w.vsub(c.position,L.rj),O.vectorToWorldFrame(o,L.ni,L.ni),O.vectorToWorldFrame(o,L.ri,L.ri),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}}const R=Fn,P=Rn,I=Ln,q=zn;for(let E=0,S=b.length;E!==S;E++){e.getTriangleVertices(b[E],R,P,I),e.getNormal(b[E],q),y.vsub(R,w);let A=w.dot(q);if(q.scale(A,w),y.vsub(w,w),A=w.distanceTo(y),D.pointInTriangle(w,R,P,I)&&A<t.radius){if(u)return!0;let C=this.createContactEquation(r,c,t,e,l,d);w.vsub(y,C.ni),C.ni.normalize(),C.ni.scale(t.radius,C.ri),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),O.pointToWorldFrame(n,o,w,w),w.vsub(c.position,C.rj),O.vectorToWorldFrame(o,C.ni,C.ni),O.vectorToWorldFrame(o,C.ri,C.ri),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,n,i,o,r,c,l,d,u){const h=new a,p=bn;p.set(0,0,1),i.vmult(p,p);for(let f=0;f<e.vertices.length/3;f++){e.getVertex(f,h);const v=new a;v.copy(h),O.pointToWorldFrame(n,o,v,h);const y=En;if(h.vsub(s,y),p.dot(y)<=0){if(u)return!0;const m=this.createContactEquation(r,c,t,e,l,d);m.ni.copy(p);const x=Cn;p.scale(y.dot(p),x),h.vsub(x,x),m.ri.copy(x),m.ri.vsub(r.position,m.ri),m.rj.copy(h),m.rj.vsub(c.position,m.rj),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}}}const at=new a,dt=new a,ut=new a,vn=new a,wn=new a,xn=new G,gn=new G,bn=new a,En=new a,Cn=new a,zn=new a,An=new a;new a;const Bn=new a,Sn=new a,Tn=new a,Mn=new a,Pn=new a,_n=new a,Nn=new a,In=new a,Fn=new a,Rn=new a,Ln=new a,qn=new W,kn=[],At=new a,pe=new a,On=new a,Vn=new a,Wn=new a;function jn(F,t,e){let s=null;const n=F.length;for(let i=0;i!==n;i++){const o=F[i],r=On;F[(i+1)%n].vsub(o,r);const c=Vn;r.cross(t,c);const l=Wn;e.vsub(o,l);const d=c.dot(l);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const Bt=new a,Dn=new a,Gn=new a,Hn=new a,Un=[new a,new a,new a,new a,new a,new a],Yn=new a,$n=new a,Xn=new a,Kn=new a,Zn=new a,Qn=new a,Jn=new a,ti=new a,ei=new a,si=new a,ni=new a,ii=new a,oi=new a,ri=new a;new a;new a;const ci=new a,ai=new a,li=new a,hi=new a,di=new a,ui=new a,pi=new a,fi=new a,mi=new a,yi=new a,fe=new G,vi=new a;new a;const wi=new a,me=new a,xi=new a,gi=new a,bi=new a,Ei=[0],Ci=new a,zi=new a;class ye{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let c=0;c<i;c++){let l=!1;const d=s[c];for(;d>n[r];)r++;l=d===n[r],l||ve(t,d)}r=0;for(let c=0;c<o;c++){let l=!1;const d=n[c];for(;d>s[r];)r++;l=s[r]===d,l||ve(e,d)}}}function ve(F,t){F.push((t&4294901760)>>16,t&65535)}const kt=(F,t)=>F<t?`${F}-${t}`:`${t}-${F}`;class Ai{constructor(){this.data={keys:[]}}get(t,e){const s=kt(t,e);return this.data[s]}set(t,e,s){const n=kt(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=kt(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Bi extends we{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new a,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new a,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new zs,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new hn,this.constraints=[],this.narrowphase=new yn(this),this.collisionMatrix=new Zt,this.collisionMatrixPrevious=new Zt,this.bodyOverlapKeeper=new ye,this.shapeOverlapKeeper=new ye,this.contactmaterials=[],this.contactMaterialTable=new Ai,this.defaultMaterial=new Pt("default"),this.defaultContactMaterial=new Mt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof St?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=D.ALL,s.from=t,s.to=e,s.callback=n,Ot.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=D.ANY,s.from=t,s.to=e,s.result=n,Ot.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=D.CLOSEST,s.from=t,s.to=e,s.result=n,Ot.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof M&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=H.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=H.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(H.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const c=this.bodies[r];c.previousPosition.lerp(c.position,o,c.interpolatedPosition),c.previousQuaternion.slerp(c.quaternion,o,c.interpolatedQuaternion),c.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=_i,n=Ni,i=this.bodies.length,o=this.bodies,r=this.solver,c=this.gravity,l=this.doProfiling,d=this.profile,u=M.DYNAMIC;let h=-1/0;const p=this.constraints,f=Pi;c.length();const v=c.x,y=c.y,w=c.z;let m=0;for(l&&(h=H.now()),m=0;m!==i;m++){const E=o[m];if(E.type===u){const S=E.force,A=E.mass;S.x+=A*v,S.y+=A*y,S.z+=A*w}}for(let E=0,S=this.subsystems.length;E!==S;E++)this.subsystems[E].update();l&&(h=H.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),l&&(d.broadphase=H.now()-h);let x=p.length;for(m=0;m!==x;m++){const E=p[m];if(!E.collideConnected)for(let S=s.length-1;S>=0;S-=1)(E.bodyA===s[S]&&E.bodyB===n[S]||E.bodyB===s[S]&&E.bodyA===n[S])&&(s.splice(S,1),n.splice(S,1))}this.collisionMatrixTick(),l&&(h=H.now());const g=Mi,b=e.length;for(m=0;m!==b;m++)g.push(e[m]);e.length=0;const z=this.frictionEquations.length;for(m=0;m!==z;m++)f.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,g,this.frictionEquations,f),l&&(d.narrowphase=H.now()-h),l&&(h=H.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const B=e.length;for(let E=0;E!==B;E++){const S=e[E],A=S.bi,C=S.bj,j=S.si,L=S.sj;let k;if(A.material&&C.material?k=this.getContactMaterial(A.material,C.material)||this.defaultContactMaterial:k=this.defaultContactMaterial,k.friction,A.material&&C.material&&(A.material.friction>=0&&C.material.friction>=0&&A.material.friction*C.material.friction,A.material.restitution>=0&&C.material.restitution>=0&&(S.restitution=A.material.restitution*C.material.restitution)),r.addEquation(S),A.allowSleep&&A.type===M.DYNAMIC&&A.sleepState===M.SLEEPING&&C.sleepState===M.AWAKE&&C.type!==M.STATIC){const Y=C.velocity.lengthSquared()+C.angularVelocity.lengthSquared(),U=C.sleepSpeedLimit**2;Y>=U*2&&(A.wakeUpAfterNarrowphase=!0)}if(C.allowSleep&&C.type===M.DYNAMIC&&C.sleepState===M.SLEEPING&&A.sleepState===M.AWAKE&&A.type!==M.STATIC){const Y=A.velocity.lengthSquared()+A.angularVelocity.lengthSquared(),U=A.sleepSpeedLimit**2;Y>=U*2&&(C.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(A,C,!0),this.collisionMatrixPrevious.get(A,C)||(ft.body=C,ft.contact=S,A.dispatchEvent(ft),ft.body=A,C.dispatchEvent(ft)),this.bodyOverlapKeeper.set(A.id,C.id),this.shapeOverlapKeeper.set(j.id,L.id)}for(this.emitContactEvents(),l&&(d.makeContactConstraints=H.now()-h,h=H.now()),m=0;m!==i;m++){const E=o[m];E.wakeUpAfterNarrowphase&&(E.wakeUp(),E.wakeUpAfterNarrowphase=!1)}for(x=p.length,m=0;m!==x;m++){const E=p[m];E.update();for(let S=0,A=E.equations.length;S!==A;S++){const C=E.equations[S];r.addEquation(C)}}r.solve(t,this),l&&(d.solve=H.now()-h),r.removeAllEquations();const _=Math.pow;for(m=0;m!==i;m++){const E=o[m];if(E.type&u){const S=_(1-E.linearDamping,t),A=E.velocity;A.scale(S,A);const C=E.angularVelocity;if(C){const j=_(1-E.angularDamping,t);C.scale(j,C)}}}this.dispatchEvent(Ti),l&&(h=H.now());const P=this.stepnumber%(this.quatNormalizeSkip+1)===0,I=this.quatNormalizeFast;for(m=0;m!==i;m++)o[m].integrate(t,P,I);this.clearForces(),this.broadphase.dirty=!0,l&&(d.integrate=H.now()-h),this.stepnumber+=1,this.dispatchEvent(Si);let q=!0;if(this.allowSleep)for(q=!1,m=0;m!==i;m++){const E=o[m];E.sleepTick(this.time),E.sleepState!==M.SLEEPING&&(q=!0)}this.hasActiveBodies=q}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(et,st),t){for(let i=0,o=et.length;i<o;i+=2)mt.bodyA=this.getBodyById(et[i]),mt.bodyB=this.getBodyById(et[i+1]),this.dispatchEvent(mt);mt.bodyA=mt.bodyB=null}if(e){for(let i=0,o=st.length;i<o;i+=2)yt.bodyA=this.getBodyById(st[i]),yt.bodyB=this.getBodyById(st[i+1]),this.dispatchEvent(yt);yt.bodyA=yt.bodyB=null}et.length=st.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(et,st),s){for(let i=0,o=et.length;i<o;i+=2){const r=this.getShapeById(et[i]),c=this.getShapeById(et[i+1]);nt.shapeA=r,nt.shapeB=c,r&&(nt.bodyA=r.body),c&&(nt.bodyB=c.body),this.dispatchEvent(nt)}nt.bodyA=nt.bodyB=nt.shapeA=nt.shapeB=null}if(n){for(let i=0,o=st.length;i<o;i+=2){const r=this.getShapeById(st[i]),c=this.getShapeById(st[i+1]);it.shapeA=r,it.shapeB=c,r&&(it.bodyA=r.body),c&&(it.bodyB=c.body),this.dispatchEvent(it)}it.bodyA=it.bodyB=it.shapeA=it.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new W;const Ot=new D,H=globalThis.performance||{};if(!H.now){let F=Date.now();H.timing&&H.timing.navigationStart&&(F=H.timing.navigationStart),H.now=()=>Date.now()-F}new a;const Si={type:"postStep"},Ti={type:"preStep"},ft={type:M.COLLIDE_EVENT_NAME,body:null,contact:null},Mi=[],Pi=[],_i=[],Ni=[],et=[],st=[],mt={type:"beginContact",bodyA:null,bodyB:null},yt={type:"endContact",bodyA:null,bodyB:null},nt={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},it={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},qi=Ge({__name:"PenaltyGame",setup(F){const t=He(),e=new Pe,s=window.innerWidth-200,n=window.innerHeight,i=new _e(75,s/n,.1,100);i.updateProjectionMatrix(),i.position.set(4,2,0);const o=new Ne({antialias:!0,logarithmicDepthBuffer:!0});o.setSize(s,n),o.toneMapping=Ie,o.toneMappingExposure=.5,o.shadowMap.enabled=!0,o.shadowMap.type=Fe;const r=new je(i,o.domElement);r.enableDamping=!0,r.maxAzimuthAngle=Math.PI,r.maxPolarAngle=Math.PI/2-.1,new Re().load("./texture/outdoor.jpg",x=>{x.mapping=Le,e.background=x,e.environment=x,e.backgroundBlurriness=.2});const l=new qe(16777215);l.position.set(10,50,0),l.castShadow=!0,l.shadow.mapSize.width=2048,l.shadow.mapSize.height=2048,l.shadow.camera.near=.5,l.shadow.camera.far=500,l.shadow.camera.fov=30,l.shadow.bias=-8e-5,l.intensity=2,e.add(l);const d=new Bi;d.gravity.set(0,-9.82,0);let u,h;const p=new Xe;p.setDecoderPath("./draco/");const f=new De;f.setDRACOLoader(p),f.load("./models/playground.glb",x=>{const g=x.scene;console.log("model",g),g.traverse(b=>{if(b.isMesh&&b.name.search(/Solid/)===-1){b.castShadow=!0,b.receiveShadow=!0;const z=new Tt(b.geometry.attributes.position.array,b.geometry.index.array),B=new M({mass:0,shape:z});B.position.copy(b.getWorldPosition(new ke)),B.quaternion.copy(b.getWorldQuaternion(new Oe)),d.addBody(B)}if(b.name==="Soccer_Ball"){u=b;const z=new tn(.15);h=new M({mass:1,position:new a(0,35,0),shape:z}),d.addBody(h),setTimeout(()=>{w()},2e3)}b.name==="door"&&(b.material=new Ve({transparent:!0,opacity:0}))}),e.add(g)});let v=new We;function y(){let x=v.getDelta();d.step(x),u&&h&&(u.position.copy(h.position),u.quaternion.copy(h.quaternion)),r.update,o.render(e,i),requestAnimationFrame(y)}function w(){h.position.set(0,15,0),h.velocity.set(0,0,0),h.angularVelocity.set(0,0,0)}let m=!1;return window.addEventListener("click",()=>{m||(m=!0,h.applyForce(new a(-100,60,8),h.position),setTimeout(()=>{m=!1,w()},6e3))}),Ue(()=>{t.value&&(t.value.appendChild(o.domElement),y())}),(x,g)=>(Ye(),$e("div",{ref_key:"container",ref:t,class:"container"},null,512))}});export{qi as default};
